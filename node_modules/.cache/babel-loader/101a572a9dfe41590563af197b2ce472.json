{"ast":null,"code":"import BigNumber from 'bignumber.js';\nexport const isRAddress = address => /^R[1-9A-HJ-NP-Za-km-z]{33,34}$/.test(address);\nexport const isiAddress = address => /^i[1-9A-HJ-NP-Za-km-z]{33,34}$/.test(address);\nexport const isETHAddressAsync = async address => {\n  const response = await fetch('./exclude.json');\n  let excludeFound = true;\n  try {\n    const excludeList = await response.json();\n    excludeFound = (excludeList === null || excludeList === void 0 ? void 0 : excludeList.ETH.findIndex(element => {\n      return element.toLowerCase() === address.toLowerCase();\n    })) === -1;\n  } catch (e) {}\n  const ETHPassesRegex = /^(0x)?[0-9a-fA-F]{40}$/.test(address);\n  const retval = excludeFound && ETHPassesRegex;\n  return retval;\n};\nexport const isETHAddress = address => {\n  const ETHPassesRegex = /^(0x)?[0-9a-fA-F]{40}$/.test(address);\n  return ETHPassesRegex;\n};\nexport const validateAddress = async address => {\n  if (isiAddress(address) || isRAddress(address) || (await isETHAddressAsync(address))) {\n    return true;\n  } else {\n    return 'Address is not valid';\n    console.log(\"1\");\n  }\n};\nexport const validateNFTAddress = address => {\n  if (isiAddress(address) || isRAddress(address)) {\n    return true;\n  } else {\n    return 'Address is not valid';\n  }\n};\nexport const NFTAddressType = address => {\n  if (isiAddress(address)) return 4;else if (isRAddress(address)) return 2;else return 'Address is not valid';\n};\n_c = NFTAddressType;\nexport const validateClaimAddress = (address, usePublicKey) => {\n  if (usePublicKey) {\n    return true;\n  }\n  if (isiAddress(address) || isRAddress(address)) {\n    return true;\n  } else {\n    return 'Address is not valid';\n  }\n};\nexport const uint64ToVerusFloat = number => {\n  const input = BigInt(number);\n  let inter = `${input / BigInt(100000000)}.`;\n  let decimalp = `${input % BigInt(100000000)}`;\n  if (input < 0) {\n    inter = `-${inter}`;\n    decimalp = decimalp.slice(1);\n  }\n  while (decimalp.length < 8) {\n    decimalp = `0${decimalp}`;\n  }\n  return inter + decimalp;\n};\nexport const coinsToUnits = (coin, decimals) => {\n  return coin.multipliedBy(BigNumber(10).pow(BigNumber(decimals)));\n};\nexport const coinsToSats = coins => {\n  BigNumber.set({\n    EXPONENTIAL_AT: 1000000,\n    ROUNDING_MODE: BigNumber.ROUND_FLOOR\n  });\n  let input = BigNumber(coins);\n  return BigNumber(coinsToUnits(input, 8).toFixed(0)).toString();\n};\nvar _c;\n$RefreshReg$(_c, \"NFTAddressType\");","map":{"version":3,"names":["BigNumber","isRAddress","address","test","isiAddress","isETHAddressAsync","response","fetch","excludeFound","excludeList","json","ETH","findIndex","element","toLowerCase","e","ETHPassesRegex","retval","isETHAddress","validateAddress","console","log","validateNFTAddress","NFTAddressType","_c","validateClaimAddress","usePublicKey","uint64ToVerusFloat","number","input","BigInt","inter","decimalp","slice","length","coinsToUnits","coin","decimals","multipliedBy","pow","coinsToSats","coins","set","EXPONENTIAL_AT","ROUNDING_MODE","ROUND_FLOOR","toFixed","toString","$RefreshReg$"],"sources":["/Users/oddfl3x/Code/bridge2/NATI<>bridge_API_SWAP/src/utils/rules.js"],"sourcesContent":["import BigNumber from 'bignumber.js';\r\n\r\nexport const isRAddress = (address) => (/^R[1-9A-HJ-NP-Za-km-z]{33,34}$/).test(address);\r\nexport const isiAddress = (address) => (/^i[1-9A-HJ-NP-Za-km-z]{33,34}$/).test(address);\r\n\r\nexport const isETHAddressAsync = async (address) => {\r\n  const response = await fetch('./exclude.json');\r\n  let excludeFound = true;\r\n  try {\r\n    const excludeList = await response.json();\r\n    excludeFound = excludeList?.ETH.findIndex(element => {\r\n      return element.toLowerCase() === address.toLowerCase();\r\n    }) === -1;\r\n  } catch (e) {\r\n\r\n  }\r\n\r\n  const ETHPassesRegex = (/^(0x)?[0-9a-fA-F]{40}$/).test(address);\r\n  const retval = excludeFound && ETHPassesRegex;\r\n  return retval;\r\n}\r\n\r\nexport const isETHAddress = (address) => {\r\n  const ETHPassesRegex = (/^(0x)?[0-9a-fA-F]{40}$/).test(address);\r\n  return ETHPassesRegex;\r\n}\r\n\r\nexport const validateAddress = async (address) => {\r\n\r\n  if (isiAddress(address) || isRAddress(address) || await isETHAddressAsync(address)) {\r\n    return true\r\n  } else {\r\n    return 'Address is not valid'\r\n    console.log(\"1\")\r\n  }\r\n\r\n}\r\n\r\nexport const validateNFTAddress = (address) => {\r\n  if (isiAddress(address) || isRAddress(address)) {\r\n    return true\r\n  } else {\r\n    return 'Address is not valid'\r\n  }\r\n}\r\n\r\nexport const NFTAddressType = (address) => {\r\n  if (isiAddress(address))\r\n    return 4;\r\n  else if (isRAddress(address))\r\n    return 2;\r\n  else\r\n    return 'Address is not valid'\r\n\r\n}\r\n\r\nexport const validateClaimAddress = (address, usePublicKey) => {\r\n\r\n  if (usePublicKey) {\r\n    return true;\r\n  } if (isiAddress(address) || isRAddress(address)) {\r\n    return true\r\n  } else {\r\n    return 'Address is not valid'\r\n  }\r\n}\r\n\r\nexport const uint64ToVerusFloat = (number) => {\r\n\r\n  const input = BigInt(number);\r\n  let inter = `${(input / BigInt(100000000))}.`\r\n  let decimalp = `${(input % BigInt(100000000))}`\r\n\r\n  if (input < 0) {\r\n    inter = `-${inter}`;\r\n    decimalp = decimalp.slice(1);\r\n  }\r\n\r\n  while (decimalp.length < 8) {\r\n    decimalp = `0${decimalp}`;\r\n  }\r\n  return (inter + decimalp)\r\n}\r\n\r\nexport const coinsToUnits = (coin, decimals) => {\r\n  return coin.multipliedBy(BigNumber(10).pow(BigNumber(decimals)))\r\n}\r\n\r\nexport const coinsToSats = (coins) => {\r\n  BigNumber.set({ EXPONENTIAL_AT: 1000000, ROUNDING_MODE: BigNumber.ROUND_FLOOR });\r\n  let input = BigNumber(coins);\r\n\r\n  return BigNumber(coinsToUnits(input, 8).toFixed(0)).toString();\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}