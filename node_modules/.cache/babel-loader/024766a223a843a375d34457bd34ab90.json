{"ast":null,"code":"var _jsxFileName = \"/Users/oddfl3x/Code/bridge2/NATI<>bridge_API_SWAP/src/components/NATIForm/TransactionForm.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { LoadingButton } from '@mui/lab';\nimport { Alert, Typography } from '@mui/material';\nimport Grid from '@mui/material/Grid';\nimport { Box } from '@mui/system';\nimport { useWeb3React } from '@web3-react/core';\nimport { useForm } from 'react-hook-form';\nimport web3 from 'web3';\nimport ERC20_ABI from 'abis/ERC20Abi.json';\nimport NATI_ABI from 'abis/NatiAbi.json';\nimport { GLOBAL_ADDRESS, ETHEREUM_BLOCKCHAIN_NAME } from 'constants/contractAddress';\nimport useContract from 'hooks/useContract';\nimport { getContract } from 'utils/contract';\nimport { validateAddress, NFTAddressType } from 'utils/rules';\nimport AddressField from './AddressField';\nimport AmountField from './AmountField';\nimport DestinationField from './DestinationField';\nimport { useToast } from '../Toast/ToastProvider';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst maxGasApprove = 60000;\nconst maxGasSwap = 1000000;\nexport default function TransactionForm() {\n  _s();\n  const [isTxPending, setIsTxPending] = useState(false);\n  const [alert, setAlert] = useState(null);\n  const {\n    addToast\n  } = useToast();\n  const {\n    account,\n    library\n  } = useWeb3React();\n  const natiContract = useContract(GLOBAL_ADDRESS.NATI, NATI_ABI);\n  const {\n    handleSubmit,\n    control,\n    watch\n  } = useForm({\n    mode: 'all'\n  });\n  const destination = watch('Swap to');\n  const authoriseOneTokenAmount = async amount => {\n    setAlert(`Metamask will now pop up to allow the spend ${amount}(NATI) from your ${ETHEREUM_BLOCKCHAIN_NAME} balance.`);\n    const tokenERC = GLOBAL_ADDRESS.NATI;\n    const tokenInstContract = getContract(tokenERC, ERC20_ABI, library, account);\n    const decimals = web3.utils.toBN(await tokenInstContract.decimals());\n    const ten = new web3.utils.BN(10);\n    const base = ten.pow(new web3.utils.BN(decimals));\n    const comps = amount.split('.');\n    if (comps.length > 2) {\n      throw new Error('Too many decimal points');\n    }\n    let whole = comps[0];\n    let fraction = comps[1];\n    if (!whole) {\n      whole = '0';\n    }\n    if (!fraction) {\n      fraction = '0';\n    }\n    if (fraction.length > decimals) {\n      throw new Error('Too many decimal places');\n    }\n    while (fraction.length < decimals) {\n      fraction += '0';\n    }\n    whole = new web3.utils.BN(whole);\n    fraction = new web3.utils.BN(fraction);\n    const bigAmount = whole.mul(base).add(fraction);\n    const approve = await tokenInstContract.approve(GLOBAL_ADDRESS.VNATI, bigAmount.toString(), {\n      from: account,\n      gasLimit: maxGasApprove\n    });\n    setAlert(`Authorising ERC20 Token, please wait...`);\n    const reply = await approve.wait();\n    if (reply.status === 0) {\n      throw new Error(\"Authorising ERC20 Token Spend Failed, please check your balance.\");\n    }\n    setAlert(`\n      Your ${ETHEREUM_BLOCKCHAIN_NAME} account has authorised the bridge to spend your NATI token, the amount: ${amount}. \n      \\n Next, after this window please check the amount in Metamask is what you wish to send.`);\n  };\n  const onSubmit = async values => {\n    const {\n      token,\n      amount\n    } = values;\n    setAlert(null);\n    setIsTxPending(true);\n    const validAccount = await validateAddress(account);\n    if (validAccount !== true) {\n      addToast({\n        type: \"error\",\n        description: 'Sending Account invalid'\n      });\n      setAlert(null);\n      setIsTxPending(false);\n      return;\n    }\n    try {\n      if ((token === null || token === void 0 ? void 0 : token.value) !== GLOBAL_ADDRESS.ETH) {\n        await authoriseOneTokenAmount(token, amount);\n      }\n      const result = getConfigOptions({\n        ...values,\n        poolAvailable,\n        GASPrice,\n        auxDest: pubkey[account]\n      });\n      if (result) {\n        const {\n          flagvalue,\n          feecurrency,\n          fees,\n          destinationtype,\n          destinationaddress,\n          destinationcurrency,\n          secondreserveid\n        } = result;\n        const verusAmount = coinsToSats(amount);\n        const currencyIaddress = token.value;\n        const CReserveTransfer = {\n          version: 1,\n          currencyvalue: {\n            currency: currencyIaddress,\n            amount: verusAmount\n          },\n          // currency sending from ethereum\n          flags: flagvalue,\n          feecurrencyid: feecurrency,\n          // fee is vrsc pre bridge launch, veth or others post.\n          fees,\n          destination: {\n            destinationtype,\n            destinationaddress\n          },\n          // destination address currency is going to\n          destcurrencyid: destinationcurrency,\n          // destination currency is vrsc on direct. bridge.veth on bounceback\n          destsystemid: \"0x0000000000000000000000000000000000000000\",\n          // destination system not used \n          secondreserveid // used as return currency type on bounce back\n        };\n        if (currencyIaddress === secondreserveid) {\n          throw new Error('Cannot bounceback to same currency');\n        }\n        const {\n          BN\n        } = web3.utils;\n        let MetaMaskFee = new BN(web3.utils.toWei(ETH_FEES.ETH, 'ether'));\n        // eslint-disable-next-line\n        if (destinationtype & FLAG_DEST_GATEWAY) {\n          MetaMaskFee = MetaMaskFee.add(new BN(GASPrice.WEICOST)); // bounceback fee\n          if (!pubkey[account]) {\n            throw new Error('No Refund address present.');\n          }\n        }\n        if (token.value === GLOBAL_ADDRESS.ETH) {\n          MetaMaskFee = MetaMaskFee.add(new BN(web3.utils.toWei(amount, 'ether')));\n        }\n        const timeoutDuration = 240000; // 240 seconds\n\n        const timeoutPromise = new Promise((_, reject) => {\n          setTimeout(() => {\n            reject(new Error(\"Transaction timeout exceeded.\"));\n          }, timeoutDuration);\n        });\n        const txResult = await delegatorContract.sendTransfer(CReserveTransfer, {\n          from: account,\n          gasLimit: maxGas,\n          value: MetaMaskFee.toString()\n        });\n        const promiseRace = await Promise.race([txResult.wait(), timeoutPromise]);\n        if (promiseRace instanceof Error) {\n          throw new Error('Transaction timed out');\n        }\n        addToast({\n          type: \"success\",\n          description: 'Transaction Success!'\n        });\n        setAlert(null);\n        setIsTxPending(false);\n      } else {\n        throw new Error('something went wrong');\n      }\n    } catch (error) {\n      if (error.message) {\n        addToast({\n          type: \"error\",\n          description: error.message\n        });\n      } else {\n        addToast({\n          type: \"error\",\n          description: 'Transaction Failed!'\n        });\n      }\n      setAlert(null);\n      setIsTxPending(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(onSubmit),\n      children: [alert && /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"warning\",\n        sx: {\n          mb: 3\n        },\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          children: alert\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 11\n      }, this), !account && /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"info\",\n        sx: {\n          mb: 3\n        },\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          children: /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Wallet not connected\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 22\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 3,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(AddressField, {\n            control: control\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(DestinationField, {\n          control: control\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(AmountField, {\n          control: control,\n          destination: destination\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        mt: \"30px\",\n        textAlign: \"center\",\n        width: \"100%\",\n        children: /*#__PURE__*/_jsxDEV(LoadingButton, {\n          loading: isTxPending,\n          disabled: isTxPending,\n          type: \"submit\",\n          color: \"primary\",\n          variant: \"contained\",\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(TransactionForm, \"bJZACMBCx+QrrfwoYoaHiZaYFPA=\", false, function () {\n  return [useToast, useWeb3React, useContract, useForm];\n});\n_c = TransactionForm;\nvar _c;\n$RefreshReg$(_c, \"TransactionForm\");","map":{"version":3,"names":["React","useState","LoadingButton","Alert","Typography","Grid","Box","useWeb3React","useForm","web3","ERC20_ABI","NATI_ABI","GLOBAL_ADDRESS","ETHEREUM_BLOCKCHAIN_NAME","useContract","getContract","validateAddress","NFTAddressType","AddressField","AmountField","DestinationField","useToast","jsxDEV","_jsxDEV","Fragment","_Fragment","maxGasApprove","maxGasSwap","TransactionForm","_s","isTxPending","setIsTxPending","alert","setAlert","addToast","account","library","natiContract","NATI","handleSubmit","control","watch","mode","destination","authoriseOneTokenAmount","amount","tokenERC","tokenInstContract","decimals","utils","toBN","ten","BN","base","pow","comps","split","length","Error","whole","fraction","bigAmount","mul","add","approve","VNATI","toString","from","gasLimit","reply","wait","status","onSubmit","values","token","validAccount","type","description","value","ETH","result","getConfigOptions","poolAvailable","GASPrice","auxDest","pubkey","flagvalue","feecurrency","fees","destinationtype","destinationaddress","destinationcurrency","secondreserveid","verusAmount","coinsToSats","currencyIaddress","CReserveTransfer","version","currencyvalue","currency","flags","feecurrencyid","destcurrencyid","destsystemid","MetaMaskFee","toWei","ETH_FEES","FLAG_DEST_GATEWAY","WEICOST","timeoutDuration","timeoutPromise","Promise","_","reject","setTimeout","txResult","delegatorContract","sendTransfer","maxGas","promiseRace","race","error","message","children","severity","sx","mb","fileName","_jsxFileName","lineNumber","columnNumber","container","spacing","item","xs","mt","textAlign","width","loading","disabled","color","variant","_c","$RefreshReg$"],"sources":["/Users/oddfl3x/Code/bridge2/NATI<>bridge_API_SWAP/src/components/NATIForm/TransactionForm.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nimport { LoadingButton } from '@mui/lab';\r\nimport { Alert, Typography } from '@mui/material';\r\nimport Grid from '@mui/material/Grid';\r\nimport { Box } from '@mui/system';\r\nimport { useWeb3React } from '@web3-react/core';\r\nimport { useForm } from 'react-hook-form';\r\nimport web3 from 'web3';\r\n\r\nimport ERC20_ABI from 'abis/ERC20Abi.json';\r\nimport NATI_ABI from 'abis/NatiAbi.json';\r\nimport {\r\n  GLOBAL_ADDRESS,\r\n  ETHEREUM_BLOCKCHAIN_NAME\r\n} from 'constants/contractAddress';\r\nimport useContract from 'hooks/useContract';\r\nimport { getContract } from 'utils/contract';\r\nimport { validateAddress, NFTAddressType } from 'utils/rules'\r\n\r\nimport AddressField from './AddressField';\r\nimport AmountField from './AmountField';\r\nimport DestinationField from './DestinationField';\r\nimport { useToast } from '../Toast/ToastProvider';\r\n\r\nconst maxGasApprove = 60000;\r\nconst maxGasSwap = 1000000;\r\n\r\nexport default function TransactionForm() {\r\n\r\n  const [isTxPending, setIsTxPending] = useState(false);\r\n  const [alert, setAlert] = useState(null);\r\n  const { addToast } = useToast();\r\n  const { account, library } = useWeb3React();\r\n  const natiContract = useContract(GLOBAL_ADDRESS.NATI, NATI_ABI);\r\n\r\n  const { handleSubmit, control, watch } = useForm({\r\n    mode: 'all'\r\n  });\r\n\r\n  const destination = watch('Swap to');\r\n\r\n  const authoriseOneTokenAmount = async (amount) => {\r\n    setAlert(`Metamask will now pop up to allow the spend ${amount}(NATI) from your ${ETHEREUM_BLOCKCHAIN_NAME} balance.`);\r\n\r\n    const tokenERC = GLOBAL_ADDRESS.NATI;\r\n    const tokenInstContract = getContract(tokenERC, ERC20_ABI, library, account)\r\n    const decimals = web3.utils.toBN(await tokenInstContract.decimals());\r\n\r\n    const ten = new web3.utils.BN(10);\r\n    const base = ten.pow(new web3.utils.BN(decimals));\r\n    const comps = amount.split('.');\r\n    if (comps.length > 2) { throw new Error('Too many decimal points'); }\r\n\r\n    let whole = comps[0];\r\n    let fraction = comps[1];\r\n\r\n    if (!whole) { whole = '0'; }\r\n    if (!fraction) { fraction = '0'; }\r\n    if (fraction.length > decimals) {\r\n      throw new Error('Too many decimal places');\r\n    }\r\n\r\n    while (fraction.length < decimals) {\r\n      fraction += '0';\r\n    }\r\n\r\n    whole = new web3.utils.BN(whole);\r\n    fraction = new web3.utils.BN(fraction);\r\n    const bigAmount = (whole.mul(base)).add(fraction);\r\n\r\n    const approve = await tokenInstContract.approve(GLOBAL_ADDRESS.VNATI, bigAmount.toString(), { from: account, gasLimit: maxGasApprove })\r\n\r\n    setAlert(`Authorising ERC20 Token, please wait...`);\r\n    const reply = await approve.wait();\r\n\r\n    if (reply.status === 0) {\r\n      throw new Error(\"Authorising ERC20 Token Spend Failed, please check your balance.\")\r\n    }\r\n    setAlert(`\r\n      Your ${ETHEREUM_BLOCKCHAIN_NAME} account has authorised the bridge to spend your NATI token, the amount: ${amount}. \r\n      \\n Next, after this window please check the amount in Metamask is what you wish to send.`\r\n    );\r\n  }\r\n\r\n  const onSubmit = async (values) => {\r\n    const { token, amount } = values;\r\n    setAlert(null);\r\n    setIsTxPending(true);\r\n    const validAccount = await validateAddress(account);\r\n    if (validAccount !== true) {\r\n      addToast({ type: \"error\", description: 'Sending Account invalid' })\r\n      setAlert(null);\r\n      setIsTxPending(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      if (token?.value !== GLOBAL_ADDRESS.ETH) {\r\n        await authoriseOneTokenAmount(token, amount);\r\n      }\r\n      const result = getConfigOptions({ ...values, poolAvailable, GASPrice, auxDest: pubkey[account] });\r\n\r\n      if (result) {\r\n        const { flagvalue, feecurrency, fees, destinationtype, destinationaddress, destinationcurrency, secondreserveid } = result;\r\n        const verusAmount = coinsToSats(amount);\r\n        const currencyIaddress = token.value;\r\n        const CReserveTransfer = {\r\n          version: 1,\r\n          currencyvalue: { currency: currencyIaddress, amount: verusAmount }, // currency sending from ethereum\r\n          flags: flagvalue,\r\n          feecurrencyid: feecurrency, // fee is vrsc pre bridge launch, veth or others post.\r\n          fees,\r\n          destination: { destinationtype, destinationaddress }, // destination address currency is going to\r\n          destcurrencyid: destinationcurrency,   // destination currency is vrsc on direct. bridge.veth on bounceback\r\n          destsystemid: \"0x0000000000000000000000000000000000000000\",     // destination system not used \r\n          secondreserveid    // used as return currency type on bounce back\r\n        }\r\n\r\n        if (currencyIaddress === secondreserveid) {\r\n          throw new Error('Cannot bounceback to same currency');\r\n        }\r\n\r\n        const { BN } = web3.utils;\r\n        let MetaMaskFee = new BN(web3.utils.toWei(ETH_FEES.ETH, 'ether'));\r\n        // eslint-disable-next-line\r\n        if (destinationtype & FLAG_DEST_GATEWAY) {\r\n          MetaMaskFee = MetaMaskFee.add(new BN(GASPrice.WEICOST)); // bounceback fee\r\n          if (!pubkey[account]) {\r\n            throw new Error('No Refund address present.');\r\n          }\r\n        }\r\n\r\n        if (token.value === GLOBAL_ADDRESS.ETH) {\r\n          MetaMaskFee = MetaMaskFee.add(new BN(web3.utils.toWei(amount, 'ether')));\r\n        }\r\n\r\n        const timeoutDuration = 240000; // 240 seconds\r\n\r\n        const timeoutPromise = new Promise((_, reject) => {\r\n          setTimeout(() => {\r\n            reject(new Error(\"Transaction timeout exceeded.\"));\r\n          }, timeoutDuration);\r\n        });\r\n\r\n        const txResult = await delegatorContract.sendTransfer(\r\n          CReserveTransfer,\r\n          { from: account, gasLimit: maxGas, value: MetaMaskFee.toString() }\r\n        );\r\n\r\n        const promiseRace = await Promise.race([txResult.wait(), timeoutPromise]);\r\n\r\n        if (promiseRace instanceof Error) {\r\n          throw new Error('Transaction timed out');\r\n        }\r\n\r\n        addToast({ type: \"success\", description: 'Transaction Success!' });\r\n        setAlert(null);\r\n        setIsTxPending(false);\r\n      } else {\r\n        throw new Error('something went wrong');\r\n      }\r\n    } catch (error) {\r\n      if (error.message) {\r\n        addToast({ type: \"error\", description: error.message })\r\n      } else {\r\n        addToast({ type: \"error\", description: 'Transaction Failed!' })\r\n      }\r\n      setAlert(null);\r\n      setIsTxPending(false);\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        {alert &&\r\n          <Alert severity=\"warning\" sx={{ mb: 3 }}>\r\n            <Typography>\r\n              {alert}\r\n            </Typography>\r\n          </Alert>\r\n        }\r\n        {!account && <Alert severity=\"info\" sx={{ mb: 3 }}>\r\n          <Typography>\r\n            <b>Wallet not connected</b>\r\n          </Typography>\r\n        </Alert>\r\n        }\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12}>\r\n            <AddressField\r\n              control={control}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <DestinationField\r\n            control={control}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <AmountField\r\n            control={control}\r\n            destination={destination}\r\n\r\n          />\r\n        </Grid>\r\n        <Box mt=\"30px\" textAlign=\"center\" width=\"100%\">\r\n          <LoadingButton loading={isTxPending} disabled={isTxPending} type=\"submit\" color=\"primary\" variant=\"contained\">Send</LoadingButton>\r\n        </Box>\r\n\r\n      </form >\r\n    </>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}