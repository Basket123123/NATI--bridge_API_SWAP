{"ast":null,"code":"import React from'react';import{useWeb3React}from'@web3-react/core';import ERC20_ABI from'abis/ERC20Abi.json';import InputControlField from'components/InputControlField';import{GLOBAL_ADDRESS}from'constants/contractAddress';import{getMaxAmount,getContract}from'utils/contract';import{jsx as _jsx}from\"react/jsx-runtime\";const AmountField=_ref=>{let{control,destination}=_ref;const{account,library}=useWeb3React();const validate=async amount=>{if(amount<=0){return'Amount is not valid.';}let ERC20ADDRESS;if(destination===\"itan\"){ERC20ADDRESS=GLOBAL_ADDRESS.NATI;}const tokenInstContract=getContract(ERC20ADDRESS,ERC20_ABI,library,account);const maxAmount=await getMaxAmount(tokenInstContract,account);if(maxAmount<amount){return\"Amount is not available in your wallet. \".concat(maxAmount,\" NATI\");}return true;};return/*#__PURE__*/_jsx(InputControlField,{name:\"amount\",label:\"Amount of NATI to swap to itan\\uD83D\\uDE80\",fullWidth:true,variant:\"standard\",control:control,type:\"tel\",defaultValue:\"0\",min:0,rules:{required:'Amount is required',validate}});};export default AmountField;","map":{"version":3,"names":["React","useWeb3React","ERC20_ABI","InputControlField","GLOBAL_ADDRESS","getMaxAmount","getContract","jsx","_jsx","AmountField","_ref","control","destination","account","library","validate","amount","ERC20ADDRESS","NATI","tokenInstContract","maxAmount","concat","name","label","fullWidth","variant","type","defaultValue","min","rules","required"],"sources":["/Users/oddfl3x/Code/bridge2/NATI<>bridge_API_SWAP/src/components/NATIForm/AmountField.jsx"],"sourcesContent":["import React from 'react'\r\n\r\nimport { useWeb3React } from '@web3-react/core';\r\n\r\nimport ERC20_ABI from 'abis/ERC20Abi.json';\r\nimport InputControlField from 'components/InputControlField'\r\nimport { GLOBAL_ADDRESS } from 'constants/contractAddress';\r\nimport { getMaxAmount, getContract } from 'utils/contract';\r\n\r\nconst AmountField = ({ control, destination }) => {\r\n\r\n  const { account, library } = useWeb3React();\r\n\r\n  const validate = async (amount) => {\r\n\r\n    if (amount <= 0) {\r\n      return 'Amount is not valid.'\r\n    }\r\n    let ERC20ADDRESS;\r\n\r\n    if (destination === \"itan\") {\r\n      ERC20ADDRESS = GLOBAL_ADDRESS.NATI\r\n    }\r\n    const tokenInstContract = getContract(ERC20ADDRESS, ERC20_ABI, library, account)\r\n    const maxAmount = await getMaxAmount(tokenInstContract, account);\r\n    if (maxAmount < amount) {\r\n      return `Amount is not available in your wallet. ${maxAmount} NATI`\r\n    }\r\n\r\n    return true;\r\n  }\r\n  return (\r\n    <InputControlField\r\n      name=\"amount\"\r\n      label=\"Amount of NATI to swap to itanðŸš€\"\r\n      fullWidth\r\n      variant=\"standard\"\r\n      control={control}\r\n      type=\"tel\"\r\n      defaultValue=\"0\"\r\n      min={0}\r\n      rules={{\r\n        required: 'Amount is required',\r\n        validate\r\n      }}\r\n    />\r\n  )\r\n}\r\n\r\nexport default AmountField\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAEzB,OAASC,YAAY,KAAQ,kBAAkB,CAE/C,MAAO,CAAAC,SAAS,KAAM,oBAAoB,CAC1C,MAAO,CAAAC,iBAAiB,KAAM,8BAA8B,CAC5D,OAASC,cAAc,KAAQ,2BAA2B,CAC1D,OAASC,YAAY,CAAEC,WAAW,KAAQ,gBAAgB,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAE3D,KAAM,CAAAC,WAAW,CAAGC,IAAA,EAA8B,IAA7B,CAAEC,OAAO,CAAEC,WAAY,CAAC,CAAAF,IAAA,CAE3C,KAAM,CAAEG,OAAO,CAAEC,OAAQ,CAAC,CAAGb,YAAY,CAAC,CAAC,CAE3C,KAAM,CAAAc,QAAQ,CAAG,KAAO,CAAAC,MAAM,EAAK,CAEjC,GAAIA,MAAM,EAAI,CAAC,CAAE,CACf,MAAO,sBAAsB,CAC/B,CACA,GAAI,CAAAC,YAAY,CAEhB,GAAIL,WAAW,GAAK,MAAM,CAAE,CAC1BK,YAAY,CAAGb,cAAc,CAACc,IAAI,CACpC,CACA,KAAM,CAAAC,iBAAiB,CAAGb,WAAW,CAACW,YAAY,CAAEf,SAAS,CAAEY,OAAO,CAAED,OAAO,CAAC,CAChF,KAAM,CAAAO,SAAS,CAAG,KAAM,CAAAf,YAAY,CAACc,iBAAiB,CAAEN,OAAO,CAAC,CAChE,GAAIO,SAAS,CAAGJ,MAAM,CAAE,CACtB,iDAAAK,MAAA,CAAkDD,SAAS,UAC7D,CAEA,MAAO,KAAI,CACb,CAAC,CACD,mBACEZ,IAAA,CAACL,iBAAiB,EAChBmB,IAAI,CAAC,QAAQ,CACbC,KAAK,CAAC,4CAAkC,CACxCC,SAAS,MACTC,OAAO,CAAC,UAAU,CAClBd,OAAO,CAAEA,OAAQ,CACjBe,IAAI,CAAC,KAAK,CACVC,YAAY,CAAC,GAAG,CAChBC,GAAG,CAAE,CAAE,CACPC,KAAK,CAAE,CACLC,QAAQ,CAAE,oBAAoB,CAC9Bf,QACF,CAAE,CACH,CAAC,CAEN,CAAC,CAED,cAAe,CAAAN,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module"}