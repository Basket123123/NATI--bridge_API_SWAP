{"ast":null,"code":"import { getAddress } from '@ethersproject/address';\nimport { AddressZero } from '@ethersproject/constants';\nimport { Contract } from '@ethersproject/contracts';\nimport web3 from 'web3';\n// returns the checksummed address if the address is valid, otherwise returns false\nexport function isAddress(value) {\n  try {\n    return getAddress(value);\n  } catch {\n    return false;\n  }\n}\n\n// account is not optional\nexport function getSigner(library, account) {\n  return library.getSigner(account).connectUnchecked();\n}\nexport function getProviderOrSigner(library, account) {\n  return account ? getSigner(library, account) : library;\n}\n\n// account is optional\nexport function getContract(address, ABI, library, account) {\n  if (!isAddress(address) || address === AddressZero) {\n    throw Error(`Invalid 'address' parameter '${address}'.`);\n  }\n  return new Contract(address, ABI, getProviderOrSigner(library, account));\n}\nexport const getMaxAmount = async (ERCContract, account) => {\n  const DAIBalanceInt = await ERCContract.balanceOf(account);\n  const decimals = await ERCContract.decimals();\n  const ten = new web3.utils.BN(10);\n  const base = ten.pow(new web3.utils.BN(decimals));\n  const DAIBalancewhole = parseFloat(DAIBalanceInt.div(base.toString()).toString());\n  let mod = \"\";\n  const tempRemainder = DAIBalanceInt.mod(base.toString()).toString();\n  mod = tempRemainder;\n  while (mod.length < decimals) {\n    mod = \"0\" + mod;\n  }\n  const modulo = DAIBalancewhole + \".\" + mod;\n  return parseFloat(modulo);\n};","map":{"version":3,"names":["getAddress","AddressZero","Contract","web3","isAddress","value","getSigner","library","account","connectUnchecked","getProviderOrSigner","getContract","address","ABI","Error","getMaxAmount","ERCContract","DAIBalanceInt","balanceOf","decimals","ten","utils","BN","base","pow","DAIBalancewhole","parseFloat","div","toString","mod","tempRemainder","length","modulo"],"sources":["/Users/oddfl3x/Code/bridge2/NATI<>bridge_API_SWAP/src/utils/contract.js"],"sourcesContent":["import { getAddress } from '@ethersproject/address';\r\nimport { AddressZero } from '@ethersproject/constants';\r\nimport { Contract } from '@ethersproject/contracts';\r\nimport web3 from 'web3';\r\n// returns the checksummed address if the address is valid, otherwise returns false\r\nexport function isAddress(value) {\r\n  try {\r\n    return getAddress(value);\r\n  } catch {\r\n    return false;\r\n  }\r\n}\r\n\r\n\r\n// account is not optional\r\nexport function getSigner(library, account) {\r\n  return library.getSigner(account).connectUnchecked();\r\n}\r\n\r\nexport function getProviderOrSigner(\r\n  library,\r\n  account\r\n) {\r\n  return account ? getSigner(library, account) : library;\r\n}\r\n\r\n// account is optional\r\nexport function getContract(\r\n  address,\r\n  ABI,\r\n  library,\r\n  account\r\n) {\r\n  if (!isAddress(address) || address === AddressZero) {\r\n    throw Error(`Invalid 'address' parameter '${address}'.`);\r\n  }\r\n\r\n  return new Contract(address, ABI, getProviderOrSigner(library, account));\r\n}\r\n\r\nexport const getMaxAmount = async (ERCContract, account) => {\r\n  const DAIBalanceInt = await ERCContract.balanceOf(account);\r\n  const decimals = await ERCContract.decimals();\r\n  const ten = new web3.utils.BN(10);\r\n  const base = ten.pow(new web3.utils.BN(decimals));\r\n  const DAIBalancewhole = parseFloat(DAIBalanceInt.div(base.toString()).toString());\r\n\r\n  let mod = \"\";\r\n\r\n  const tempRemainder = DAIBalanceInt.mod(base.toString()).toString();\r\n  mod = tempRemainder;\r\n  while (mod.length < decimals) {\r\n\r\n    mod = \"0\" + mod;\r\n  }\r\n  const modulo = DAIBalancewhole + \".\" + mod;\r\n\r\n  return parseFloat(modulo);\r\n}\r\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,wBAAwB;AACnD,SAASC,WAAW,QAAQ,0BAA0B;AACtD,SAASC,QAAQ,QAAQ,0BAA0B;AACnD,OAAOC,IAAI,MAAM,MAAM;AACvB;AACA,OAAO,SAASC,SAASA,CAACC,KAAK,EAAE;EAC/B,IAAI;IACF,OAAOL,UAAU,CAACK,KAAK,CAAC;EAC1B,CAAC,CAAC,MAAM;IACN,OAAO,KAAK;EACd;AACF;;AAGA;AACA,OAAO,SAASC,SAASA,CAACC,OAAO,EAAEC,OAAO,EAAE;EAC1C,OAAOD,OAAO,CAACD,SAAS,CAACE,OAAO,CAAC,CAACC,gBAAgB,CAAC,CAAC;AACtD;AAEA,OAAO,SAASC,mBAAmBA,CACjCH,OAAO,EACPC,OAAO,EACP;EACA,OAAOA,OAAO,GAAGF,SAAS,CAACC,OAAO,EAAEC,OAAO,CAAC,GAAGD,OAAO;AACxD;;AAEA;AACA,OAAO,SAASI,WAAWA,CACzBC,OAAO,EACPC,GAAG,EACHN,OAAO,EACPC,OAAO,EACP;EACA,IAAI,CAACJ,SAAS,CAACQ,OAAO,CAAC,IAAIA,OAAO,KAAKX,WAAW,EAAE;IAClD,MAAMa,KAAK,CAAC,gCAAgCF,OAAO,IAAI,CAAC;EAC1D;EAEA,OAAO,IAAIV,QAAQ,CAACU,OAAO,EAAEC,GAAG,EAAEH,mBAAmB,CAACH,OAAO,EAAEC,OAAO,CAAC,CAAC;AAC1E;AAEA,OAAO,MAAMO,YAAY,GAAG,MAAAA,CAAOC,WAAW,EAAER,OAAO,KAAK;EAC1D,MAAMS,aAAa,GAAG,MAAMD,WAAW,CAACE,SAAS,CAACV,OAAO,CAAC;EAC1D,MAAMW,QAAQ,GAAG,MAAMH,WAAW,CAACG,QAAQ,CAAC,CAAC;EAC7C,MAAMC,GAAG,GAAG,IAAIjB,IAAI,CAACkB,KAAK,CAACC,EAAE,CAAC,EAAE,CAAC;EACjC,MAAMC,IAAI,GAAGH,GAAG,CAACI,GAAG,CAAC,IAAIrB,IAAI,CAACkB,KAAK,CAACC,EAAE,CAACH,QAAQ,CAAC,CAAC;EACjD,MAAMM,eAAe,GAAGC,UAAU,CAACT,aAAa,CAACU,GAAG,CAACJ,IAAI,CAACK,QAAQ,CAAC,CAAC,CAAC,CAACA,QAAQ,CAAC,CAAC,CAAC;EAEjF,IAAIC,GAAG,GAAG,EAAE;EAEZ,MAAMC,aAAa,GAAGb,aAAa,CAACY,GAAG,CAACN,IAAI,CAACK,QAAQ,CAAC,CAAC,CAAC,CAACA,QAAQ,CAAC,CAAC;EACnEC,GAAG,GAAGC,aAAa;EACnB,OAAOD,GAAG,CAACE,MAAM,GAAGZ,QAAQ,EAAE;IAE5BU,GAAG,GAAG,GAAG,GAAGA,GAAG;EACjB;EACA,MAAMG,MAAM,GAAGP,eAAe,GAAG,GAAG,GAAGI,GAAG;EAE1C,OAAOH,UAAU,CAACM,MAAM,CAAC;AAC3B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}