{"ast":null,"code":"import{getAddress}from'@ethersproject/address';import{AddressZero}from'@ethersproject/constants';import{Contract}from'@ethersproject/contracts';import web3 from'web3';// returns the checksummed address if the address is valid, otherwise returns false\nexport function isAddress(value){try{return getAddress(value);}catch{return false;}}// account is not optional\nexport function getSigner(library,account){return library.getSigner(account).connectUnchecked();}export function getProviderOrSigner(library,account){return account?getSigner(library,account):library;}// account is optional\nexport function getContract(address,ABI,library,account){if(!isAddress(address)||address===AddressZero){throw Error(\"Invalid 'address' parameter '\".concat(address,\"'.\"));}return new Contract(address,ABI,getProviderOrSigner(library,account));}export const getMaxAmount=async(ERCContract,account)=>{const DAIBalanceInt=await ERCContract.balanceOf(account);const decimals=await ERCContract.decimals();const ten=new web3.utils.BN(10);const base=ten.pow(new web3.utils.BN(decimals));const DAIBalancewhole=parseFloat(DAIBalanceInt.div(base.toString()).toString());let mod=\"\";const tempRemainder=DAIBalanceInt.mod(base.toString()).toString();mod=tempRemainder;while(mod.length<decimals){mod=\"0\"+mod;}const modulo=DAIBalancewhole+\".\"+mod;return parseFloat(modulo);};","map":{"version":3,"names":["getAddress","AddressZero","Contract","web3","isAddress","value","getSigner","library","account","connectUnchecked","getProviderOrSigner","getContract","address","ABI","Error","concat","getMaxAmount","ERCContract","DAIBalanceInt","balanceOf","decimals","ten","utils","BN","base","pow","DAIBalancewhole","parseFloat","div","toString","mod","tempRemainder","length","modulo"],"sources":["/Users/oddfl3x/Code/bridge2/NATI<>bridge_API_SWAP/src/utils/contract.js"],"sourcesContent":["import { getAddress } from '@ethersproject/address';\r\nimport { AddressZero } from '@ethersproject/constants';\r\nimport { Contract } from '@ethersproject/contracts';\r\nimport web3 from 'web3';\r\n// returns the checksummed address if the address is valid, otherwise returns false\r\nexport function isAddress(value) {\r\n  try {\r\n    return getAddress(value);\r\n  } catch {\r\n    return false;\r\n  }\r\n}\r\n\r\n\r\n// account is not optional\r\nexport function getSigner(library, account) {\r\n  return library.getSigner(account).connectUnchecked();\r\n}\r\n\r\nexport function getProviderOrSigner(\r\n  library,\r\n  account\r\n) {\r\n  return account ? getSigner(library, account) : library;\r\n}\r\n\r\n// account is optional\r\nexport function getContract(\r\n  address,\r\n  ABI,\r\n  library,\r\n  account\r\n) {\r\n  if (!isAddress(address) || address === AddressZero) {\r\n    throw Error(`Invalid 'address' parameter '${address}'.`);\r\n  }\r\n\r\n  return new Contract(address, ABI, getProviderOrSigner(library, account));\r\n}\r\n\r\nexport const getMaxAmount = async (ERCContract, account) => {\r\n  const DAIBalanceInt = await ERCContract.balanceOf(account);\r\n  const decimals = await ERCContract.decimals();\r\n  const ten = new web3.utils.BN(10);\r\n  const base = ten.pow(new web3.utils.BN(decimals));\r\n  const DAIBalancewhole = parseFloat(DAIBalanceInt.div(base.toString()).toString());\r\n\r\n  let mod = \"\";\r\n\r\n  const tempRemainder = DAIBalanceInt.mod(base.toString()).toString();\r\n  mod = tempRemainder;\r\n  while (mod.length < decimals) {\r\n\r\n    mod = \"0\" + mod;\r\n  }\r\n  const modulo = DAIBalancewhole + \".\" + mod;\r\n\r\n  return parseFloat(modulo);\r\n}\r\n"],"mappings":"AAAA,OAASA,UAAU,KAAQ,wBAAwB,CACnD,OAASC,WAAW,KAAQ,0BAA0B,CACtD,OAASC,QAAQ,KAAQ,0BAA0B,CACnD,MAAO,CAAAC,IAAI,KAAM,MAAM,CACvB;AACA,MAAO,SAAS,CAAAC,SAASA,CAACC,KAAK,CAAE,CAC/B,GAAI,CACF,MAAO,CAAAL,UAAU,CAACK,KAAK,CAAC,CAC1B,CAAE,KAAM,CACN,MAAO,MAAK,CACd,CACF,CAGA;AACA,MAAO,SAAS,CAAAC,SAASA,CAACC,OAAO,CAAEC,OAAO,CAAE,CAC1C,MAAO,CAAAD,OAAO,CAACD,SAAS,CAACE,OAAO,CAAC,CAACC,gBAAgB,CAAC,CAAC,CACtD,CAEA,MAAO,SAAS,CAAAC,mBAAmBA,CACjCH,OAAO,CACPC,OAAO,CACP,CACA,MAAO,CAAAA,OAAO,CAAGF,SAAS,CAACC,OAAO,CAAEC,OAAO,CAAC,CAAGD,OAAO,CACxD,CAEA;AACA,MAAO,SAAS,CAAAI,WAAWA,CACzBC,OAAO,CACPC,GAAG,CACHN,OAAO,CACPC,OAAO,CACP,CACA,GAAI,CAACJ,SAAS,CAACQ,OAAO,CAAC,EAAIA,OAAO,GAAKX,WAAW,CAAE,CAClD,KAAM,CAAAa,KAAK,iCAAAC,MAAA,CAAiCH,OAAO,MAAI,CAAC,CAC1D,CAEA,MAAO,IAAI,CAAAV,QAAQ,CAACU,OAAO,CAAEC,GAAG,CAAEH,mBAAmB,CAACH,OAAO,CAAEC,OAAO,CAAC,CAAC,CAC1E,CAEA,MAAO,MAAM,CAAAQ,YAAY,CAAG,KAAAA,CAAOC,WAAW,CAAET,OAAO,GAAK,CAC1D,KAAM,CAAAU,aAAa,CAAG,KAAM,CAAAD,WAAW,CAACE,SAAS,CAACX,OAAO,CAAC,CAC1D,KAAM,CAAAY,QAAQ,CAAG,KAAM,CAAAH,WAAW,CAACG,QAAQ,CAAC,CAAC,CAC7C,KAAM,CAAAC,GAAG,CAAG,GAAI,CAAAlB,IAAI,CAACmB,KAAK,CAACC,EAAE,CAAC,EAAE,CAAC,CACjC,KAAM,CAAAC,IAAI,CAAGH,GAAG,CAACI,GAAG,CAAC,GAAI,CAAAtB,IAAI,CAACmB,KAAK,CAACC,EAAE,CAACH,QAAQ,CAAC,CAAC,CACjD,KAAM,CAAAM,eAAe,CAAGC,UAAU,CAACT,aAAa,CAACU,GAAG,CAACJ,IAAI,CAACK,QAAQ,CAAC,CAAC,CAAC,CAACA,QAAQ,CAAC,CAAC,CAAC,CAEjF,GAAI,CAAAC,GAAG,CAAG,EAAE,CAEZ,KAAM,CAAAC,aAAa,CAAGb,aAAa,CAACY,GAAG,CAACN,IAAI,CAACK,QAAQ,CAAC,CAAC,CAAC,CAACA,QAAQ,CAAC,CAAC,CACnEC,GAAG,CAAGC,aAAa,CACnB,MAAOD,GAAG,CAACE,MAAM,CAAGZ,QAAQ,CAAE,CAE5BU,GAAG,CAAG,GAAG,CAAGA,GAAG,CACjB,CACA,KAAM,CAAAG,MAAM,CAAGP,eAAe,CAAG,GAAG,CAAGI,GAAG,CAE1C,MAAO,CAAAH,UAAU,CAACM,MAAM,CAAC,CAC3B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}