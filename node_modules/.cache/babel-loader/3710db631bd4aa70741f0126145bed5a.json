{"ast":null,"code":"import React,{useState}from'react';import{LoadingButton}from'@mui/lab';import{Alert,Typography}from'@mui/material';import Grid from'@mui/material/Grid';import{Box}from'@mui/system';import{useWeb3React}from'@web3-react/core';import{useForm}from'react-hook-form';import web3 from'web3';import ERC20_ABI from'abis/ERC20Abi.json';import NATI_ABI from'abis/NatiAbi.json';import{GLOBAL_ADDRESS,ETHEREUM_BLOCKCHAIN_NAME}from'constants/contractAddress';import useContract from'hooks/useContract';import{getContract}from'utils/contract';import{validateAddress,NFTAddressType}from'utils/rules';import AmountField from'./AmountField';import DestinationField from'./DestinationField';import{useToast}from'../Toast/ToastProvider';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const maxGasApprove=60000;const maxGasSwap=1000000;export default function TransactionForm(){const[isTxPending,setIsTxPending]=useState(false);const[alert,setAlert]=useState(null);const{addToast}=useToast();const{account,library}=useWeb3React();const natiContract=useContract(GLOBAL_ADDRESS.NATI,NATI_ABI);const{handleSubmit,control,watch}=useForm({mode:'all'});const destination=watch('Swap to');const authoriseOneTokenAmount=async amount=>{setAlert(\"Metamask will now pop up to allow the spend \".concat(amount,\"(NATI) from your \").concat(ETHEREUM_BLOCKCHAIN_NAME,\" balance.\"));const tokenERC=GLOBAL_ADDRESS.NATI;const tokenInstContract=getContract(tokenERC,ERC20_ABI,library,account);const decimals=web3.utils.toBN(await tokenInstContract.decimals());const ten=new web3.utils.BN(10);const base=ten.pow(new web3.utils.BN(decimals));const comps=amount.split('.');if(comps.length>2){throw new Error('Too many decimal points');}let whole=comps[0];let fraction=comps[1];if(!whole){whole='0';}if(!fraction){fraction='0';}if(fraction.length>decimals){throw new Error('Too many decimal places');}while(fraction.length<decimals){fraction+='0';}whole=new web3.utils.BN(whole);fraction=new web3.utils.BN(fraction);const bigAmount=whole.mul(base).add(fraction);const approve=await tokenInstContract.approve(GLOBAL_ADDRESS.VNATI,bigAmount.toString(),{from:account,gasLimit:maxGasApprove});setAlert(\"Authorising ERC20 Token, please wait...\");const reply=await approve.wait();if(reply.status===0){throw new Error(\"Authorising ERC20 Token Spend Failed, please check your balance.\");}setAlert(\"\\n      Your \".concat(ETHEREUM_BLOCKCHAIN_NAME,\" account has authorised the bridge to spend your NATI token, the amount: \").concat(amount,\". \\n      \\n Next, after this window please check the amount in Metamask is what you wish to send.\"));};const onSubmit=async values=>{const{amount,destination}=values;setAlert(null);setIsTxPending(true);const validAccount=await validateAddress(account);if(validAccount!==true){addToast({type:\"error\",description:'Sending Account invalid'});setAlert(null);setIsTxPending(false);return;}try{await authoriseOneTokenAmount(amount);const addressType=NFTAddressType(destination);const txResult=await natiContract.swapToBridge(web3.utils.toWei(amount,'ether'),destination,addressType,\"0xffEce948b8A38bBcC813411D2597f7f8485a0689\",\"0x67460C2f56774eD27EeB8685f29f6CEC0B090B00\",{from:account,gasLimit:maxGasSwap});await txResult.wait();addToast({type:\"success\",description:'Transaction Success!'});setAlert(null);setIsTxPending(false);}catch(error){if(error.message){addToast({type:\"error\",description:error.message});}else{addToast({type:\"error\",description:'Transaction Failed!'});}setAlert(null);setIsTxPending(false);}};return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit(onSubmit),children:[alert&&/*#__PURE__*/_jsx(Alert,{severity:\"warning\",sx:{mb:3},children:/*#__PURE__*/_jsx(Typography,{children:alert})}),!account&&/*#__PURE__*/_jsx(Alert,{severity:\"info\",sx:{mb:3},children:/*#__PURE__*/_jsx(Typography,{children:/*#__PURE__*/_jsx(\"b\",{children:\"Wallet not connected\"})})}),/*#__PURE__*/_jsx(Grid,{item:true,xs:12,children:/*#__PURE__*/_jsx(DestinationField,{control:control})}),/*#__PURE__*/_jsx(Grid,{item:true,xs:12,children:/*#__PURE__*/_jsx(AmountField,{control:control,destination:destination})}),/*#__PURE__*/_jsx(Box,{mt:\"30px\",textAlign:\"center\",width:\"100%\",children:/*#__PURE__*/_jsx(LoadingButton,{loading:isTxPending,disabled:isTxPending,type:\"submit\",color:\"primary\",variant:\"contained\",children:\"Send\"})})]})});}","map":{"version":3,"names":["React","useState","LoadingButton","Alert","Typography","Grid","Box","useWeb3React","useForm","web3","ERC20_ABI","NATI_ABI","GLOBAL_ADDRESS","ETHEREUM_BLOCKCHAIN_NAME","useContract","getContract","validateAddress","NFTAddressType","AmountField","DestinationField","useToast","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","maxGasApprove","maxGasSwap","TransactionForm","isTxPending","setIsTxPending","alert","setAlert","addToast","account","library","natiContract","NATI","handleSubmit","control","watch","mode","destination","authoriseOneTokenAmount","amount","concat","tokenERC","tokenInstContract","decimals","utils","toBN","ten","BN","base","pow","comps","split","length","Error","whole","fraction","bigAmount","mul","add","approve","VNATI","toString","from","gasLimit","reply","wait","status","onSubmit","values","validAccount","type","description","addressType","txResult","swapToBridge","toWei","error","message","children","severity","sx","mb","item","xs","mt","textAlign","width","loading","disabled","color","variant"],"sources":["/Users/oddfl3x/Code/bridge2/NATI<>bridge_API_SWAP/src/components/NATIForm/TransactionForm.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nimport { LoadingButton } from '@mui/lab';\r\nimport { Alert, Typography } from '@mui/material';\r\nimport Grid from '@mui/material/Grid';\r\nimport { Box } from '@mui/system';\r\nimport { useWeb3React } from '@web3-react/core';\r\nimport { useForm } from 'react-hook-form';\r\nimport web3 from 'web3';\r\n\r\nimport ERC20_ABI from 'abis/ERC20Abi.json';\r\nimport NATI_ABI from 'abis/NatiAbi.json';\r\nimport {\r\n  GLOBAL_ADDRESS,\r\n  ETHEREUM_BLOCKCHAIN_NAME\r\n} from 'constants/contractAddress';\r\nimport useContract from 'hooks/useContract';\r\nimport { getContract } from 'utils/contract';\r\nimport { validateAddress, NFTAddressType } from 'utils/rules'\r\n\r\nimport AmountField from './AmountField';\r\nimport DestinationField from './DestinationField';\r\nimport { useToast } from '../Toast/ToastProvider';\r\n\r\nconst maxGasApprove = 60000;\r\nconst maxGasSwap = 1000000;\r\n\r\nexport default function TransactionForm() {\r\n\r\n  const [isTxPending, setIsTxPending] = useState(false);\r\n  const [alert, setAlert] = useState(null);\r\n  const { addToast } = useToast();\r\n  const { account, library } = useWeb3React();\r\n  const natiContract = useContract(GLOBAL_ADDRESS.NATI, NATI_ABI);\r\n\r\n  const { handleSubmit, control, watch } = useForm({\r\n    mode: 'all'\r\n  });\r\n\r\n  const destination = watch('Swap to');\r\n\r\n  const authoriseOneTokenAmount = async (amount) => {\r\n    setAlert(`Metamask will now pop up to allow the spend ${amount}(NATI) from your ${ETHEREUM_BLOCKCHAIN_NAME} balance.`);\r\n\r\n    const tokenERC = GLOBAL_ADDRESS.NATI;\r\n    const tokenInstContract = getContract(tokenERC, ERC20_ABI, library, account)\r\n    const decimals = web3.utils.toBN(await tokenInstContract.decimals());\r\n\r\n    const ten = new web3.utils.BN(10);\r\n    const base = ten.pow(new web3.utils.BN(decimals));\r\n    const comps = amount.split('.');\r\n    if (comps.length > 2) { throw new Error('Too many decimal points'); }\r\n\r\n    let whole = comps[0];\r\n    let fraction = comps[1];\r\n\r\n    if (!whole) { whole = '0'; }\r\n    if (!fraction) { fraction = '0'; }\r\n    if (fraction.length > decimals) {\r\n      throw new Error('Too many decimal places');\r\n    }\r\n\r\n    while (fraction.length < decimals) {\r\n      fraction += '0';\r\n    }\r\n\r\n    whole = new web3.utils.BN(whole);\r\n    fraction = new web3.utils.BN(fraction);\r\n    const bigAmount = (whole.mul(base)).add(fraction);\r\n\r\n    const approve = await tokenInstContract.approve(GLOBAL_ADDRESS.VNATI, bigAmount.toString(), { from: account, gasLimit: maxGasApprove })\r\n\r\n    setAlert(`Authorising ERC20 Token, please wait...`);\r\n    const reply = await approve.wait();\r\n\r\n    if (reply.status === 0) {\r\n      throw new Error(\"Authorising ERC20 Token Spend Failed, please check your balance.\")\r\n    }\r\n    setAlert(`\r\n      Your ${ETHEREUM_BLOCKCHAIN_NAME} account has authorised the bridge to spend your NATI token, the amount: ${amount}. \r\n      \\n Next, after this window please check the amount in Metamask is what you wish to send.`\r\n    );\r\n  }\r\n\r\n  const onSubmit = async (values) => {\r\n    const { amount, destination } = values;\r\n    setAlert(null);\r\n    setIsTxPending(true);\r\n    const validAccount = await validateAddress(account);\r\n    if (validAccount !== true) {\r\n      addToast({ type: \"error\", description: 'Sending Account invalid' })\r\n      setAlert(null);\r\n      setIsTxPending(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await authoriseOneTokenAmount(amount);\r\n      const addressType = NFTAddressType(destination);\r\n      const txResult = await natiContract.swapToBridge(\r\n        web3.utils.toWei(amount, 'ether'), destination, addressType, \"0xffEce948b8A38bBcC813411D2597f7f8485a0689\", \"0x67460C2f56774eD27EeB8685f29f6CEC0B090B00\",\r\n        { from: account, gasLimit: maxGasSwap });\r\n\r\n      await txResult.wait();\r\n\r\n      addToast({ type: \"success\", description: 'Transaction Success!' });\r\n      setAlert(null);\r\n      setIsTxPending(false);\r\n\r\n    } catch (error) {\r\n      if (error.message) {\r\n        addToast({ type: \"error\", description: error.message })\r\n      } else {\r\n        addToast({ type: \"error\", description: 'Transaction Failed!' })\r\n      }\r\n      setAlert(null);\r\n      setIsTxPending(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        {alert &&\r\n          <Alert severity=\"warning\" sx={{ mb: 3 }}>\r\n            <Typography>\r\n              {alert}\r\n            </Typography>\r\n          </Alert>\r\n        }\r\n        {!account && <Alert severity=\"info\" sx={{ mb: 3 }}>\r\n          <Typography>\r\n            <b>Wallet not connected</b>\r\n          </Typography>\r\n        </Alert>\r\n        }\r\n        <Grid item xs={12}>\r\n          <DestinationField\r\n            control={control}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <AmountField\r\n            control={control}\r\n            destination={destination}\r\n\r\n          />\r\n        </Grid>\r\n        <Box mt=\"30px\" textAlign=\"center\" width=\"100%\">\r\n          <LoadingButton loading={isTxPending} disabled={isTxPending} type=\"submit\" color=\"primary\" variant=\"contained\">Send</LoadingButton>\r\n        </Box>\r\n\r\n      </form >\r\n    </>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}