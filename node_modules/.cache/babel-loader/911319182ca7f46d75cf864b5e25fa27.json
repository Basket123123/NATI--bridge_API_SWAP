{"ast":null,"code":"var _jsxFileName = \"/Users/oddfl3x/Code/bridge/natiBridgeWebsite - Copy/src/components/NATIForm/AmountField.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport ERC20_ABI from 'abis/ERC20Abi.json';\nimport InputControlField from 'components/InputControlField';\nimport { GLOBAL_ADDRESS } from 'constants/contractAddress';\nimport { getMaxAmount, getContract } from 'utils/contract';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AmountField = ({\n  control,\n  destination\n}) => {\n  _s();\n  const {\n    account,\n    library\n  } = useWeb3React();\n  const validate = async amount => {\n    if (amount <= 0) {\n      return 'Amount is not valid.';\n    }\n    let ERC20ADDRESS;\n    if (destination === \"itan\") {\n      ERC20ADDRESS = GLOBAL_ADDRESS.NATI;\n    }\n    const tokenInstContract = getContract(ERC20ADDRESS, ERC20_ABI, library, account);\n    const maxAmount = await getMaxAmount(tokenInstContract, account);\n    if (maxAmount < amount) {\n      return `Amount is not available in your wallet. ${maxAmount} NATI`;\n    }\n    return true;\n  };\n  return /*#__PURE__*/_jsxDEV(InputControlField, {\n    name: \"amount\",\n    label: \"Amount of NATI to swap to itan\\uD83D\\uDE80\",\n    fullWidth: true,\n    variant: \"standard\",\n    control: control,\n    type: \"tel\",\n    defaultValue: \"0\",\n    min: 0,\n    rules: {\n      required: 'Amount is required',\n      validate\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s(AmountField, \"6dLocauXcIHyjmjhz+sx44iYIew=\", false, function () {\n  return [useWeb3React];\n});\n_c = AmountField;\nexport default AmountField;\nvar _c;\n$RefreshReg$(_c, \"AmountField\");","map":{"version":3,"names":["React","useWeb3React","ERC20_ABI","InputControlField","GLOBAL_ADDRESS","getMaxAmount","getContract","jsxDEV","_jsxDEV","AmountField","control","destination","_s","account","library","validate","amount","ERC20ADDRESS","NATI","tokenInstContract","maxAmount","name","label","fullWidth","variant","type","defaultValue","min","rules","required","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/oddfl3x/Code/bridge/natiBridgeWebsite - Copy/src/components/NATIForm/AmountField.jsx"],"sourcesContent":["import React from 'react'\r\n\r\nimport { useWeb3React } from '@web3-react/core';\r\n\r\nimport ERC20_ABI from 'abis/ERC20Abi.json';\r\nimport InputControlField from 'components/InputControlField'\r\nimport { GLOBAL_ADDRESS } from 'constants/contractAddress';\r\nimport { getMaxAmount, getContract } from 'utils/contract';\r\n\r\nconst AmountField = ({ control, destination }) => {\r\n\r\n  const { account, library } = useWeb3React();\r\n\r\n  const validate = async (amount) => {\r\n\r\n    if (amount <= 0) {\r\n      return 'Amount is not valid.'\r\n    }\r\n    let ERC20ADDRESS;\r\n\r\n    if (destination === \"itan\") {\r\n      ERC20ADDRESS = GLOBAL_ADDRESS.NATI\r\n    }\r\n    const tokenInstContract = getContract(ERC20ADDRESS, ERC20_ABI, library, account)\r\n    const maxAmount = await getMaxAmount(tokenInstContract, account);\r\n    if (maxAmount < amount) {\r\n      return `Amount is not available in your wallet. ${maxAmount} NATI`\r\n    }\r\n\r\n    return true;\r\n  }\r\n  return (\r\n    <InputControlField\r\n      name=\"amount\"\r\n      label=\"Amount of NATI to swap to itanðŸš€\"\r\n      fullWidth\r\n      variant=\"standard\"\r\n      control={control}\r\n      type=\"tel\"\r\n      defaultValue=\"0\"\r\n      min={0}\r\n      rules={{\r\n        required: 'Amount is required',\r\n        validate\r\n      }}\r\n    />\r\n  )\r\n}\r\n\r\nexport default AmountField\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,SAASC,YAAY,QAAQ,kBAAkB;AAE/C,OAAOC,SAAS,MAAM,oBAAoB;AAC1C,OAAOC,iBAAiB,MAAM,8BAA8B;AAC5D,SAASC,cAAc,QAAQ,2BAA2B;AAC1D,SAASC,YAAY,EAAEC,WAAW,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3D,MAAMC,WAAW,GAAGA,CAAC;EAAEC,OAAO;EAAEC;AAAY,CAAC,KAAK;EAAAC,EAAA;EAEhD,MAAM;IAAEC,OAAO;IAAEC;EAAQ,CAAC,GAAGb,YAAY,CAAC,CAAC;EAE3C,MAAMc,QAAQ,GAAG,MAAOC,MAAM,IAAK;IAEjC,IAAIA,MAAM,IAAI,CAAC,EAAE;MACf,OAAO,sBAAsB;IAC/B;IACA,IAAIC,YAAY;IAEhB,IAAIN,WAAW,KAAK,MAAM,EAAE;MAC1BM,YAAY,GAAGb,cAAc,CAACc,IAAI;IACpC;IACA,MAAMC,iBAAiB,GAAGb,WAAW,CAACW,YAAY,EAAEf,SAAS,EAAEY,OAAO,EAAED,OAAO,CAAC;IAChF,MAAMO,SAAS,GAAG,MAAMf,YAAY,CAACc,iBAAiB,EAAEN,OAAO,CAAC;IAChE,IAAIO,SAAS,GAAGJ,MAAM,EAAE;MACtB,OAAO,2CAA2CI,SAAS,OAAO;IACpE;IAEA,OAAO,IAAI;EACb,CAAC;EACD,oBACEZ,OAAA,CAACL,iBAAiB;IAChBkB,IAAI,EAAC,QAAQ;IACbC,KAAK,EAAC,4CAAkC;IACxCC,SAAS;IACTC,OAAO,EAAC,UAAU;IAClBd,OAAO,EAAEA,OAAQ;IACjBe,IAAI,EAAC,KAAK;IACVC,YAAY,EAAC,GAAG;IAChBC,GAAG,EAAE,CAAE;IACPC,KAAK,EAAE;MACLC,QAAQ,EAAE,oBAAoB;MAC9Bd;IACF;EAAE;IAAAe,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEN,CAAC;AAAArB,EAAA,CAtCKH,WAAW;EAAA,QAEcR,YAAY;AAAA;AAAAiC,EAAA,GAFrCzB,WAAW;AAwCjB,eAAeA,WAAW;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}